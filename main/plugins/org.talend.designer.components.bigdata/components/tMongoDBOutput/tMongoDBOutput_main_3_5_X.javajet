<%@ jet
	imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.EConnectionType
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.process.IConnection
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.process.IConnectionCategory
		java.util.List
"
%>
<%
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	boolean dieOnError = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
	List<? extends IConnection> inConns = node.getIncomingConnections(EConnectionType.FLOW_MAIN);
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    java.util.List<java.util.Map<String, String>> mappings = (java.util.List<java.util.Map<String, String>>)ElementParameterParser.getObjectValueXML(node, "__MAPPING__");

    boolean bulkWrite = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__SET_BULK_WRITE__"));
    String bulkWriteOperationSize = ElementParameterParser.getValue(node, "__BULK_WRITE_SIZE__");
    boolean bulkWriteType = "Ordered".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BULK_WRITE_TYPE__"));
    boolean updateAll = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__UPDATE_ALL__"));
    boolean deleteAll = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__DELETE_ALL__"));

    boolean isPossibleDynamicMode = false;

	IConnection inConn = null;
	IMetadataTable metadata = null;
	
	if(inConns!=null && inConns.size()> 0) {
		inConn = inConns.get(0);
		metadata = inConn.getMetadataTable();
	}
%>
try{
<%

	if (metadata!=null) {
		List< ? extends IConnection> conns = node.getIncomingConnections();
		for (IConnection conn : conns) {
			if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				List<IMetadataColumn> columnList = metadata.getListColumns();
				int sizeColumns = columnList.size();
				
				isPossibleDynamicMode = sizeColumns == 1;

				// Create the BasicDBObject
				%>
				updateObjectUtil_<%=cid%>.setObject(new org.bson.Document());
				
				<%
				boolean upsert_with_set = "UPSERT_WITH_SET".equalsIgnoreCase(dataAction);
				boolean insertOnlyColumnExists = false;
				boolean updateOnlyColumnExists = false;
				boolean allColumnOnlyUpdate = true;
				boolean allColumnOnlyInsert = true;
				
				boolean ignoredColumnExists = false;//not insertable, also not updatable
				
				if(upsert_with_set) {
					for (java.util.Map<String, String> mapping: mappings) {
						boolean updatable = "true".equals(mapping.get("UPDATABLE"));
						boolean insertable = "true".equals(mapping.get("INSERTABLE"));
						
						if(updatable && !insertable) {
							updateOnlyColumnExists = true;
						} else {
							allColumnOnlyUpdate = false;
						}
						
						if(insertable && !updatable) {
							insertOnlyColumnExists = true;
						} else {
							allColumnOnlyInsert = false;
						}
						
						if(!insertable && !updatable) {
							ignoredColumnExists = true;
						}
					}
					
					if(insertOnlyColumnExists)  {
					%>
					insertObjectOnlyUtil_<%=cid%>.setObject(new org.bson.Document());
					<%
					}
					
					if(updateOnlyColumnExists)  {
					%>
					updateObjectOnlyUtil_<%=cid%>.setObject(new org.bson.Document());
					<%
					}
				}
				%>

				<%
				if(!"INSERT".equalsIgnoreCase(dataAction)){
				%>
					queryObjectUtil_<%=cid%>.setObject(new org.bson.Document());
					int countKey_<%=cid%>=0;
				<%
				}
				
				// Set key/values of the BasicObject
				for (int i = 0; i < sizeColumns; i++) {
					IMetadataColumn column = columnList.get(i);
					
					for (java.util.Map<String, String> mapping: mappings) {
						if (column.getLabel().equals(mapping.get("SCHEMA_COLUMN"))) {
							boolean updatable = (upsert_with_set ? "true".equals(mapping.get("UPDATABLE")) : true);
							boolean insertable = (upsert_with_set ? "true".equals(mapping.get("INSERTABLE")) : true);
							
	                        if ("true".equals(mapping.get("REMOVE_NULL_FIELD"))) {
	                            %>
	                            if (<%=conn.getName() %>.<%=column.getLabel() %> != null) {
    	                            <%
    	                            if (!"INSERT".equalsIgnoreCase(dataAction) && column.isKey()){
    	                                %>
    	                                    queryObjectUtil_<%=cid%>.putkeyNode(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
    	                                    countKey_<%=cid%>++;
    	                                <%
                                    }
                                    
                                    if(insertable && updatable) {//insert or update column
                                        if(insertOnlyColumnExists || updateOnlyColumnExists || ignoredColumnExists) {
                                        %>
                                            updateObjectUtil_<%=cid%>.putkeyNode(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
                                        <%
                                        } else {
                                        %>
                                            updateObjectUtil_<%=cid%>.put(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
                                        <%
                                        }
                                    } else if(updatable && !insertable)  {//update only column
                                    %>
                                    updateObjectOnlyUtil_<%=cid%>.putkeyNode(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
                                    <%
                                    } else if(insertable && !updatable) {//insert only column
                                    %>
                                    insertObjectOnlyUtil_<%=cid%>.putkeyNode(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
                                    <%
                                    }
                                    %>
	                            }
                                <%
                            } else {
                                if (!"INSERT".equalsIgnoreCase(dataAction) && column.isKey()){
                                    %>
                                        queryObjectUtil_<%=cid%>.putkeyNode(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
                                        countKey_<%=cid%>++;
                                    <%
                                }
                                
                                if(insertable && updatable) {//insert or update column
                                    if(insertOnlyColumnExists || updateOnlyColumnExists || ignoredColumnExists) {
                                    %>
                                        updateObjectUtil_<%=cid%>.putkeyNode(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
                                    <%
                                    } else {
                                    %>
                                        updateObjectUtil_<%=cid%>.put(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
                                    <%
                                    }
                                } else if(updatable && !insertable)  {//update only column
                                %>
                                updateObjectOnlyUtil_<%=cid%>.putkeyNode(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
                                <%
                                } else if(insertable && !updatable) {//insert only column
                                %>
                                insertObjectOnlyUtil_<%=cid%>.putkeyNode(pathMap_<%=cid%>.get("<%=column.getLabel() %>"),"<%=column.getOriginalDbColumnName() %>", <%=conn.getName() %>.<%=column.getLabel() %>);
                                <%
                                }
                                
                            }
                            break;
                        }
		            }
  				}
  				// Get the BasicDBObject
				%>
				org.bson.Document updateObj_<%=cid%> = updateObjectUtil_<%=cid%>.getObject();
				<%

				// INSERT operation
				if ("INSERT".equalsIgnoreCase(dataAction)) {
					if(isPossibleDynamicMode) {
					%>
					Object v_<%=cid%> = updateObj_<%=cid%>.get("*");
					if(v_<%=cid%>!=null) {
						if(v_<%=cid%> instanceof org.bson.Document) {
							updateObj_<%=cid%> = (org.bson.Document)v_<%=cid%>;
						} else if(v_<%=cid%> instanceof String) {
							updateObj_<%=cid%> = org.bson.Document.parse((String)v_<%=cid%>);
						}
					}
					<%
					}
					
					// Bulk Writes
					if(bulkWrite){
						// Add inserts untill bulksize is reached then execute and re-initialze the bulk operation
						%>
						if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
							bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.InsertOneModel<org.bson.Document>(updateObj_<%=cid%>));
							bulkWriteOperationCounter_<%=cid%>++;
						} else {
                            bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.InsertOneModel<org.bson.Document>(updateObj_<%=cid%>));
							coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
							bulkWriteOperationCounter_<%=cid%>=1;
							bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
						}
						<%
					// Single Writes
					}else{
					%>
						coll_<%=cid%>.insertOne(updateObj_<%=cid%>);
					<%
					}
				// Other operations (UPDATE, UPSERT, DELETE)
				}else{
				%>
					if(countKey_<%=cid%> <=0){
						<%
						if(dieOnError){
						%>
							throw new Exception("Must have at least one key in schema");
						<%
						}else{
							if(isLog4jEnabled){
							%>
								log.error("<%=cid%> - Must have at least one key in schema");
							<%
							}
							%>
							System.err.println("Must have at least one key in schema");
						<%
						}
						%>
					}else{
						org.bson.Document queryObj_<%=cid%> = queryObjectUtil_<%=cid%>.getObject();
						<%
						// UPDATE
						if("UPDATE".equalsIgnoreCase(dataAction)){
							// Bulk Updates 
							if(bulkWrite){
								%>
								if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
									bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.ReplaceOneModel<org.bson.Document>(queryObj_<%=cid%>,updateObj_<%=cid%>));
									bulkWriteOperationCounter_<%=cid%>++;
								}else{
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.ReplaceOneModel<org.bson.Document>(queryObj_<%=cid%>,updateObj_<%=cid%>));
									coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
									bulkWriteOperationCounter_<%=cid%>=1;
									bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
								}
								<%
							}else{
								%>
								coll_<%=cid%>.replaceOne(queryObj_<%=cid%>, updateObj_<%=cid%>);
								<%
							}
						// SET
						} else if("SET".equalsIgnoreCase(dataAction)){
                            // Bulk Updates
                            if(bulkWrite){
                                String updateModel = (updateAll ? "UpdateManyModel" : "UpdateOneModel");
                                %>
                                if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.<%=updateModel%><org.bson.Document>(queryObj_<%=cid%>,new org.bson.Document("$set", updateObj_<%=cid%>)));
                                    bulkWriteOperationCounter_<%=cid%>++;
                                }else{
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.<%=updateModel%><org.bson.Document>(queryObj_<%=cid%>,new org.bson.Document("$set", updateObj_<%=cid%>)));
                                    coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
                                    bulkWriteOperationCounter_<%=cid%>=1;
                                    bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                                }
                                <%
                            }else{
                                if(updateAll){
                            	%>
                                coll_<%=cid%>.updateMany(queryObj_<%=cid%>,new org.bson.Document("$set", updateObj_<%=cid%>));
                                <%
                                } else {
                                %>
                                coll_<%=cid%>.updateOne(queryObj_<%=cid%>,new org.bson.Document("$set", updateObj_<%=cid%>));
                                <%
                                }
                            }
                        // UPSERT
                        } else if("UPSERT".equalsIgnoreCase(dataAction)){
                            // Bulk Upsert
                            if(bulkWrite){
                                %>
                                if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.ReplaceOneModel<org.bson.Document>(queryObj_<%=cid%>, updateObj_<%=cid%>,
                                        new <%= "MONGODB_4_4_X".equals(dbversion) ? "com.mongodb.client.model.ReplaceOptions()" : "com.mongodb.client.model.UpdateOptions()"%>.upsert(true)));
                                    bulkWriteOperationCounter_<%=cid%>++;
                                }else{
                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.ReplaceOneModel<org.bson.Document>(queryObj_<%=cid%>, updateObj_<%=cid%>,
                                        new <%= "MONGODB_4_4_X".equals(dbversion) ? "com.mongodb.client.model.ReplaceOptions()" : "com.mongodb.client.model.UpdateOptions()"%>.upsert(true)));
                                    coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
                                    bulkWriteOperationCounter_<%=cid%>=1;
                                    bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
                                }
                                <%
                            }else{
                                %>
                                coll_<%=cid%>.replaceOne(queryObj_<%=cid%>,updateObj_<%=cid%>,
                                    new <%= "MONGODB_4_4_X".equals(dbversion) ? "com.mongodb.client.model.ReplaceOptions()" : "com.mongodb.client.model.UpdateOptions()"%>.upsert(true));
                                <%
                            }
                        // UPSERT WITH SET
                        } else if(upsert_with_set){
                            String updateModel = (updateAll ? "UpdateManyModel" : "UpdateOneModel");

                            if(updateOnlyColumnExists) {
                            %>
                            org.bson.Document updateOnlyObj_<%=cid%> = updateObjectOnlyUtil_<%=cid%>.getObject();
                                <%if(bulkWrite) {%>
                                    if(bulkWriteOperationCounterForUpdateOnlyColumn_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
                                        bulkWriteOperationForUpdateOnlyColumn_<%=cid%>.add(new com.mongodb.client.model.<%=updateModel%><org.bson.Document>(queryObj_<%=cid%>,new org.bson.Document("$set", updateOnlyObj_<%=cid%>)));
                                        bulkWriteOperationCounterForUpdateOnlyColumn_<%=cid%>++;
                                    }else{
                                        bulkWriteOperationForUpdateOnlyColumn_<%=cid%>.add(new com.mongodb.client.model.<%=updateModel%><org.bson.Document>(queryObj_<%=cid%>,new org.bson.Document("$set", updateOnlyObj_<%=cid%>)));
                                        coll_<%=cid%>.bulkWrite(bulkWriteOperationForUpdateOnlyColumn_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
                                        bulkWriteOperationCounterForUpdateOnlyColumn_<%=cid%>=1;
                                        bulkWriteOperationForUpdateOnlyColumn_<%=cid%> = new java.util.ArrayList<>();
                                    }
                                    <%
                                }else{
                                    if(updateAll){%>
                                        coll_<%=cid%>.updateMany(queryObj_<%=cid%>,new org.bson.Document("$set", updateOnlyObj_<%=cid%>));
                                        <%
                                    } else {%>
                                        coll_<%=cid%>.updateOne(queryObj_<%=cid%>,new org.bson.Document("$set", updateOnlyObj_<%=cid%>));
                                        <%
                                    }
                                }
                            }
                            
                            if(!allColumnOnlyUpdate) {//if all columns are only updateable, then no need to do the upsert action
                                if(!allColumnOnlyInsert) {//if all columns are only insertable, then no need $set as it's empty
	                            %>
	                            org.bson.Document setObj_<%=cid%> = new org.bson.Document("$set", updateObj_<%=cid%>);
	                            <%
	                            } else {
	                            %>
	                            org.bson.Document setObj_<%=cid%> = new org.bson.Document();
	                            <%
	                            }
	                            
	                            if(insertOnlyColumnExists) {
	                            %>
	                            org.bson.Document insertOnlyObj_<%=cid%> = insertObjectOnlyUtil_<%=cid%>.getObject();
	                            setObj_<%=cid%>.put("$setOnInsert",insertOnlyObj_<%=cid%>);
	                            <%
	                            }
	                            
	                            if(bulkWrite){
	                                %>
	                                if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
	                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.<%=updateModel%><org.bson.Document>(queryObj_<%=cid%>,setObj_<%=cid%>,new com.mongodb.client.model.UpdateOptions().upsert(true)));
	                                    bulkWriteOperationCounter_<%=cid%>++;
	                                }else{
	                                    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.<%=updateModel%><org.bson.Document>(queryObj_<%=cid%>,setObj_<%=cid%>,new com.mongodb.client.model.UpdateOptions().upsert(true)));
	                                    coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>, new com.mongodb.client.model.BulkWriteOptions().ordered(<%=bulkWriteType%>));
	                                    bulkWriteOperationCounter_<%=cid%>=1;
	                                    bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
	                                }
	                                <%
	                            }else{
	                                if(updateAll){
	                            	%>
	                                coll_<%=cid%>.updateMany(queryObj_<%=cid%>,setObj_<%=cid%>,new com.mongodb.client.model.UpdateOptions().upsert(true));
	                                <%
	                                } else {
	                                %>
	                                coll_<%=cid%>.updateOne(queryObj_<%=cid%>,setObj_<%=cid%>,new com.mongodb.client.model.UpdateOptions().upsert(true));
	                                <%
	                                }
	                            }
                            }
                        // DELETE
                        } else if("DELETE".equalsIgnoreCase(dataAction)){
							// Bulk Delete
							if(bulkWrite){
								%>
								if(bulkWriteOperationCounter_<%=cid%> < bulkWriteOperationSize_<%=cid%>){
									bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.DeleteOneModel<org.bson.Document>(queryObj_<%=cid%>));
									bulkWriteOperationCounter_<%=cid%>++;
								}else{
								    bulkWriteOperation_<%=cid%>.add(new com.mongodb.client.model.DeleteOneModel<org.bson.Document>(queryObj_<%=cid%>));
									coll_<%=cid%>.bulkWrite(bulkWriteOperation_<%=cid%>);
									bulkWriteOperationCounter_<%=cid%>=1;
									bulkWriteOperation_<%=cid%> = new java.util.ArrayList<>();
								}
								<%
							}else{
								if(deleteAll) {%>
									coll_<%=cid%>.deleteMany(queryObj_<%=cid%>);
									<%
								} else {%>
									coll_<%=cid%>.deleteOne(queryObj_<%=cid%>);
									<%
								}
							}
						}
						%>
					}
				<%
				}
				%>
				} catch (Exception e_<%=cid%>) {
				<%

				// Die on Error 
				// Used only with MONGODB 2.5
				// 2.5 doesn't support BulkWrites => No BulkWrites Die and Error
                    %>
    					<%
    					if(dieOnError){
    					%>
    						throw e_<%=cid%>;
    					<%
    					}else{
    						if(isLog4jEnabled){
    						%>
    							log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
    						<%
    						}
    						%>
    						System.err.println(e_<%=cid%>.getMessage());
    					<%
    					}
    					%>
    			}
				nb_line_<%=cid %> ++;
				<%

				if(isLog4jEnabled){
				%>
					log.debug("<%=cid%> - [<%=dataAction%>] - Writing the record " + nb_line_<%=cid %> + " into database.");
				<%
				}

			}
		}
	}
	%>
